buildscript {
    ext {
        springBootVersion = '1.5.3.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.liquibase:liquibase-gradle-plugin:1.2.4")
        classpath('org.postgresql:postgresql:9.4.1212.jre7')
        classpath("nu.studer:gradle-jooq-plugin:1.0.5")
        classpath('com.bmuschko:gradle-docker-plugin:3.0.7')
    }
}

//	docker run -p 5432:5432 postgres:9.6
//	gradle clean update -PprodUrl=jdbc:postgresql://localhost:5432/postgres -PprodUsername=postgres -PprodPassword=postgres -PrunList=prod
//  gradle clean generateDooglJooqSchemaSource

group 'JOOQ_DLL'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.liquibase.gradle'
apply plugin: 'com.bmuschko.docker-java-application'
apply plugin: 'nu.studer.jooq'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    compile('com.google.guava:guava:22.0')
    compile('javax.inject:javax.inject:1')
    compile('org.hibernate:hibernate-java8')
    compile('org.postgresql:postgresql')
    compile('org.projectlombok:lombok:1.16.14')

    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}
liquibase {
    activities {
        prod {
            changeLogFile 'src/main/resources/db/changelog-master.xml'
            url project.ext.has("prodUrl") ? project.prodUrl : null;
            username project.ext.has("prodUsername") ? project.prodUsername : null;
            password project.ext.has("prodPassword") ? project.prodPassword : null;
            logLevel 'debug'
            defaultSchemaName 'public'
        }
    }
    runList = project.ext.has("runList") ? project.runList : null;

}


jooq {
    doogl(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/postgres'
            user = 'postgres'
            password = 'postgres'
            schema = 'public'
        }
        generator {
            name = 'org.jooq.util.DefaultGenerator'
            strategy {
                name = 'org.jooq.util.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.util.postgres.PostgresDatabase'
                inputSchema = 'public'
//                customTypes {
//                    customType {
//                        name = 'com.fasterxml.jackson.databind.JsonNode'
//                        converter = 'csmart.api.config.db.PostgresJSONJacksonJsonNodeBinding'
//                    }
//                }
//                forcedTypes {
//                    forcedType {
//                        name = 'com.fasterxml.jackson.databind.JsonNode'
//                        expression = 'public\\.users\\.address'
//                    }
//                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = false
                fluentSetters = true
            }
            target {
                packageName = 'doo.gl.gen'
                directory = 'src/main/generated/java'
            }
        }
    }
}